
board = "---------"
#Game state to keep track of the game
def gamestate():
    gameover = False
    newboard = board
    validmode = False
    while validmode == False:
        mode = input("2 player or computer mode? (Press 'a' for pvp 'b' for CPU): ")
        if mode == "a" or mode == "b":
            validmode = True
    if mode == "a":
        while not gameover:
            printboard(newboard)
            if primval(newboard) != "notprim":
                gameover = True
                break
            index = int(input("Enter index to place on: "))
            valid = validinput(index, newboard)
            while not valid:
                index = int(input("enter an index not placed on or less than 9: "))
                valid = validinput(index, newboard)
            newboard = makeMove(newboard, index)
        print("GG game Over")
    else:
        while not gameover:
            printboard(newboard)
            if primval(newboard) != "notprim":
                gameover = True
                break
            index = int(input("Enter index to place on: "))
            valid = validinput(index, newboard)
            while not valid:
                index = int(input("enter an index not placed on or less than 9: "))
                valid = validinput(index, newboard)
            newboard = makeMove(newboard, index)
            #Now CPU makes turn
            CPUmove = solver(newboard)[1]
            print("CPU move: ", CPUmove)
            newboard = makeMove(newboard, CPUmove)
        print("GG game Over")

def validinput(index, board):
    if index < 0 or index > 8:
        return False
    if board[index] == "-":
        return True
    else:
        return False


def printboard(board):
    stuff = "______   "
    str = ""
    x = 1
    while x < len(stuff) + 1:
        if board[x - 1] != "-":
            str += board[x - 1]
        else:
            str += stuff[x - 1]
        if x % 3 == 0:
            str += "\n"
        else:
            str += "|"
        x += 1
    print(str) 


def generateMove(position):
    return [x for x in range(9) if position[x] == "-"]

def makeMove(position, move):
    turn = ""
    turn = "x" if position.count("-") % 2 == 0 else "o"

    return position[:move] + turn + position[move + 1:]

def primval(position):
    trios = [
        position[:3], position[3:6], position[6:], position[::4], position[::3], position[1::3], position[2::3], position[2:8:2]
    ]
    for trio in trios:
        if trio == "xxx" or trio == "ooo":
            return "lose"
    if position.count("-") == 0:
        return "tie"
    else:
        return "notprim"

    
memoized = {}

#The brains of the CPU, solve the positons of the board
def solver(position):
    #Start with random num
    CPUmove = 99
    if primval(position) != "notprim":
        memoized[position] = [primval(position), True]
        return primval(position), CPUmove
    seentie = False
    seenloss = False
    childVal = ""
    for move in generateMove(position):
        newPos = makeMove(position, move)
        if newPos in memoized:
            childVal = memoized[newPos][0]
        else:
            childVal = solver(newPos)[0]
       
        if childVal == "lose":
            #Adding to CPU move
            CPUmove = move
            seenloss = True
        elif childVal =="tie":
            if seenloss == False:
                CPUmove = move
            seentie = True
    if seentie == False and seenloss == False:
        CPUmove = generateMove(position)[0]
    val = 'win' if seenloss else 'tie' if seentie else 'lose'
    memoized[position] = [val, False]
    return val, CPUmove
#Tester will determine all win lose and tie positions. 
def tester():
    solver("---------")

    wins = 0
    primwin = 0
    lose = 0
    primlose = 0
    tie = 0
    total = 0
    primtie = 0
    x = 0
    for key in memoized:
        total += 1
        if memoized[key][0] == "win":
            wins += 1
            if memoized[key][1] == True:
                primwin += 1
        if memoized[key][0] == "lose":
            lose += 1
            if memoized[key][1] == True:
                primlose +=1
        if memoized[key][0] == "tie":
            tie += 1
            if memoized[key][1] == True:
                primtie +=1
    print("Ties: ", tie)
    print("Prim Ties: ", primtie)
    print("losses: ", lose)
    print("Prim losses: ", primlose)
    print("wins: ", wins)
    print("primwins: ", primwin)
    print("total: ", total)

gamestate()

    