#The position is always just an integer of pennies. A move is an integer of pennies removed
def doMove(position, move):
    # if primitiveValue(position):
    #     return position
    # if move > 2 or move > position:
    #     return position
    if move ==2 or move == 1:
        return position - move
def generateMove(position):
    if position == 1:
        return [1]
    elif position == 0:
        return []
    else:
        return [1, 2]
def primitiveValue(position):
    if position == 0:
        return "lose"
    else:
        return "notprim"
    

def solve(position, depth):
    if primitiveValue(position) != "notprim":
        return [primitiveValue(position), depth]
    seenLose = False
    windepths = []
    losedepths = []
    moves = generateMove(position)
    for move in moves:
        newPos = doMove(position, move)
        result = solve(newPos, depth + 1)
        losedepths.append(result[1])
        if result[0] == "lose":
            windepths.append(result[1])
            seenLose = True
    if seenLose:
        return ["win", max(windepths)]
    else:
        return ["lose", min(losedepths) ]



def tester():
    for x in range(11):
        print(x,": ", solve(x, 0))
    # print(solve(5, 0))


tester()


