class Nto0():
    def __init__(self, initial_position = 10, subtrahends = (1, 2)):
        self.initial_position = initial_position
        self.subtrahends = subtrahends

    def GenerateMoves(self, position):
        return [s for s in self.subtrahends if position >= s]

    def DoMove(self, position, move):
        return position - move

    def PrimitiveValue(self, position):
        return 'lose' if position == 0 else 'not_primitive'

    def __str__(self):
        return f'{self.initial_position}-to-0'

class TicTacToe():
    """
        Representation Example: the tic-tac-toe position
        
                    +---+---+---+
                    | X | O | X |
                    +---+---+---+
                    |   | O |   |
                    +---+---+---+
                    | O |   | X |
                    +---+---+---+
â€‹
        is represented by the 9-length string 'xox-o-o-x'.
    """
    def __init__(self, initial_position = '---------'):
        self.initial_position = initial_position

    def GenerateMoves(self, position):
        return [i for i in range(9) if position[i] == '-']

    def DoMove(self, position, move):
        # If odd number of blanks, then it's X's turn, else it's O's turn.
        whoseTurn = 'x' if position.count('-') % 2 == 1 else 'o'
        return position[:move] + whoseTurn + position[move + 1:]

    def PrimitiveValue(self, position):
        trios = [
            position[:3], position[3:6], position[6:], position[::3], 
            position[1::3], position[2::3], position[::4], position[2:8:2]
        ]
        if any(trio == 'xxx' or trio == 'ooo' for trio in trios):
            return 'lose'
        elif position.count('-') == 0:
            return 'tie'
        else:
            return 'not_primitive'

    def __str__(self):
        return 'Tic-Tac-Toe'

def Memoized_Solve(game):
    """
        We store all memoization results in the visited_positions dictionary.
        Key: Position
        Value: A tuple (VALUE, IS_PRIMITIVE)
    """
    visited_positions = {}

    def Solve(position):
        primitive_value = game.PrimitiveValue(position)
        if primitive_value != 'not_primitive':
            visited_positions[position] = (primitive_value, True)
            return primitive_value
        
        seen_lose, seen_tie = False, False
        child_value = ''
        for move in game.GenerateMoves(position):
            child_position = game.DoMove(position, move)
            if child_position in visited_positions:
                child_value = visited_positions[child_position][0]
            else:
                child_value = Solve(child_position)
            if child_value == 'lose':
                seen_lose = True
            elif child_value == 'tie':
                seen_tie = True
        value = 'win' if seen_lose else 'tie' if seen_tie else 'lose'
        visited_positions[position] = (value, False)
        return value

    return Solve(game.initial_position), visited_positions

def display_counts(game, visited_positions):
    num_loses, num_ties, num_wins = 0, 0, 0
    num_primitive_loses,num_primitive_ties, num_primitive_wins = 0, 0, 0
    for position in visited_positions:
        value, is_primitive = visited_positions[position]
        if value == 'win':
            num_wins += 1
            if is_primitive:
                num_primitive_wins += 1
        elif value == 'tie':
            num_ties += 1
            if is_primitive:
                num_primitive_ties += 1
        else:
            num_loses += 1
            if is_primitive:
                num_primitive_loses += 1

    print(f"\n{game} is a {visited_positions[game.initial_position][0]} for the first player.")
    print(f"There are {num_loses + num_wins + num_ties} reachable positions, of which {num_primitive_loses + num_primitive_wins + num_primitive_ties} are primitive.")
    print(f"There are {num_loses} loses, of which {num_primitive_loses} are primitive.")
    print(f"There are {num_wins} wins, of which {num_primitive_wins} are primitive.")
    print(f"There are {num_ties} ties, of which {num_primitive_ties} are primitive.\n")

if __name__ == '__main__':
    game = Nto0(initial_position = 100)
    value, visited_positions = Memoized_Solve(game)
    display_counts(game, visited_positions)

    game = TicTacToe()
    value, visited_positions = Memoized_Solve(game)
    display_counts(game, visited_positions)